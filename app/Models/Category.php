<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    protected $fillable = ['name', 'is_directory', 'level', 'path'];
    protected $casts = [
        'is_directory' => 'boolean'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        //监听Category的创建事件，用于初始化path和level字段值
        static::creating(function (Category $category) {
            //如果创建的是一个根目录
            if (is_null($category->parent_id)) {
                //将层级设为0
                $category->level = 0;
                //将path设为 -
                $category->path = '-';
            } else {
                //层级设为父类目层级+1
                $category->level = $category->parent->level + 1;
                //将path值设为父目录的ID以及最后加一个- 分割符
                $category->path = $category->parent->path . $category->parent_id . '-';
            }
        });

    }

    public function parent()
    {
        return $this->belongsTo(Category::class);
    }
    public function children()
    {
        //hasMany  一对多
        return $this->hasMany(Category::class, 'parent_id');
    }


    //获取所有祖先类目的ID值访问器
    public function getPathIdsAttribute()
    {
        //array_filter 用回掉函数过滤数组中的元素
        return array_filter(explode('-', trim($this->path, '-')));
    }

    //获取所有祖先类目并安层级排序访问器
    public function getAncestorsAttribute()
    {
        return Category::query()
            ->whereIn('id', $this->path_ids)
            ->orderBy('level')
            ->get();
    }

    //获取以 - 为分割的所有的祖先类目名称以及当前类目的名称的访问器
    public function getFullNameAttribute()
    {
        return $this->ancestors //获取所有祖先类目
        ->pluck('name')//取出所有祖先类目的 name 字段作为一个数组
        ->push($this->name) // 当前类目的 name 字段值驾到数组的末尾
        ->implode('-'); // 用 - 符号将数组的值组装成一个字符串
    }
}
